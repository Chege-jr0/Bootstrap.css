//React provides several functions to perform specific actions at specific points in the lifecycle of a component
//This are called Lifecycle hooks which allow you to catch components at certain points in time.They include
     1.componentWillMount()-- which is called when a component is mounted on the DOM
          class MyComponent extends React.Component {
                        constructor(props) {
                          super(props);
                        }
                        componentWillMount() {
                          // Change code below this line
                        console.log('Component will be mounted')
                          // Change code above this line
                        }
                        render() {
                          return <div />
                        }
                      };



   2.componentDidMount()-- which is the method called when the component is mounted on the DOM
       //the state takes 2.5 seconds to simulate calling a server to retrieve data
                    class MyComponent extends React.Component {
                                  constructor(props) {
                                    super(props);
                                    this.state = {
                                      activeUsers: null
                                    };
                                  }
                                  componentDidMount() {
                                    setTimeout(() => {
                                      this.setState({
                                        activeUsers: 1273
                                      });
                                    }, 2500);
                                  }
                                  render() {
                                    return (
                                      <div>
                                        {/* Change code below this line */}
                                        <h1>Active Users: {this.state.activeUsers}</h1>
                                        {/* Change code above this line */}
                                      </div>
                                    );
                                  }
                                }

 3.componentWillUnMount()-- which is the method used when unmounting the component in the dom
  In the example below we will have an event listener to listen to the event keydown and have this events trigger the callback handleKeyPress
                  class MyComponent extends React.Component {
                              constructor(props) {
                                super(props);
                                this.state = {
                                  message: ''
                                };
                                this.handleEnter = this.handleEnter.bind(this);
                                this.handleKeyPress = this.handleKeyPress.bind(this);
                              }
                              // Change code below this line
                              componentDidMount() {
                            document.addEventListener("keydown", this.handleKeyPress);
                              }
                              componentWillUnmount() {
                            document.removeEventListener("keydown", this.handleKeyPress);
                              }
                              // Change code above this line
                              handleEnter() {
                                this.setState((state) => ({
                                  message: state.message + 'You pressed the enter key! '
                                }));
                              }
                              handleKeyPress(event) {
                                if (event.keyCode === 13) {
                                  this.handleEnter();
                                }
                              }
                              render() {
                                return (
                                  <div>
                                    <h1>{this.state.message}</h1>
                                  </div>
                                );
                              }
                            };

   4.componentDidUpdate()-- this component is often used to perform side effects or additional tasks when the state or props of a component change.
        //The default behaviour of the component is that it rerenders when it receives new props even if the props havent changed.
        //We have used the method shouldcomponentUpdate() to prevent this by comparing the props.
       //The method must return a boolean value that tells React whether or not to update the component.
      Below is an example of the component function
                    class OnlyEvens extends React.Component {
                        constructor(props) {
                          super(props);
                        }
                        shouldComponentUpdate(nextProps, nextState) {
                          console.log('Should I update?');
                          // Change code below this line
                          if(nextProps.value % 2 == 0){
                            return true;
                          }
                          return false;
                          // Change code above this line
                        }
                        componentDidUpdate() {
                          console.log('Component re-rendered.');
                        }
                        render() {
                          return <h1>{this.props.value}</h1>;
                        }
                      }
                      
                      class Controller extends React.Component {
                        constructor(props) {
                          super(props);
                          this.state = {
                            value: 0
                          };
                          this.addValue = this.addValue.bind(this);
                        }
                        addValue() {
                          this.setState(state => ({
                            value: state.value + 1
                          }));
                        }
                        render() {
                          return (
                            <div>
                              <button onClick={this.addValue}>Add</button>
                              <OnlyEvens value={this.state.value} />
                            </div>
                          );
                        }
                      }
