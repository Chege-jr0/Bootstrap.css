//In react we use setState to set the state of  a component
//The setState is asynchronous in that it can change over time.

   for example the case below class MyComponent extends React.Component {
                      constructor(props) {
                        super(props);
                        this.state = {
                          text: "Hello"
                        };
                        // Change code below this line
                    this.handleClick =  this.handleClick.bind(this)
                        // Change code above this line
                      }
                      handleClick() {
                        this.setState({
                          text: "You clicked!"
                        });
                      }
                      render() {
                        return (
                          <div>
                            { /* Change code below this line */ }
                            <button onClick={this.handleClick}>
                            Click Me
                            </button>
                            { /* Change code above this line */ }
                            <h1>{this.state.text}</h1>
                          </div>
                        );
                      }
                    };
//the line this.handleClick = this.handleClick.bind(this)
//The handleClick method is bound by the current instance of the component using bind(this). This ensures that when HandleClick is called it has the correct value of this.



//We also have conditional rendering of components using the if statements
  Examine the if statement below
          class MyComponent extends React.Component {
          constructor(props) {
            super(props);
            this.state = {
              visibility: false
            };
            // Change code below this line
           this.toggleVisibility = this.toggleVisibility.bind(this);
            // Change code above this line
          }
          // Change code below this line
        toggleVisibility() {
          this.setState(state => {
            if( state.visibility === true){
              return { visility: false };
            } else {
              return { visibility: true };
            }
          });
        }
          // Change code above this line
          render() {
            if (this.state.visibility) {
              return (
                <div>
                  <button onClick={this.toggleVisibility}>Click Me</button>
                  <h1>Now you see me!</h1>
                </div>
              );
            } else {
              return (
                <div>
                  <button onClick={this.toggleVisibility}>Click Me</button>
                </div>
              );
            }
          }
        }
//Intially the visibility is set to false but the conditional statetment says sets the visibility to true and returns false
//If the visibility is set to false then the visibilty is set to true.
//Notice how the visibilty uses the if statement and the return statement is placed




//Creating methods for incrementing and decrementing the setted state for incrementing and decrementing the value when the buttons are pressed
                        class Counter extends React.Component {
                          constructor(props) {
                            super(props);
                            this.state = {
                              count: 0
                            };
                            // Change code below this line
                            this.increment = this.increment.bind(this);
                            this.decrement = this.decrement.bind(this);
                            this.reset = this.reset.bind(this);
                            // Change code above this line
                          }
                          // Change code below this line
                          increment(){
                              this.setState(state => ({
                                count: state.count + 1
                              }));
                            }
                           decrement(){
                              this.setState(state => ({
                               count: state.count - 1
                              }));
                           }
                           reset(){
                             this.setState({
                               count: 0
                             });
                           }
                           
                          // Change code above this line
                          render() {
                            return (
                              <div>
                                <button className='inc' onClick={this.increment}>Increment!</button>
                                <button className='dec' onClick={this.decrement}>Decrement!</button>
                                <button className='reset' onClick={this.reset}>Reset</button>
                                <h1>Current Count: {this.state.count}</h1>
                              </div>
                            );
                          }
                        };
   //We have created the methods and created binders for the methods
